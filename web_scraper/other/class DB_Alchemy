from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String
import configparser


Base = declarative_base()

class Entity(Base):
    __tablename__ = 'data_eater'
    url = Column(String(100), primary_key=True)
    inn = Column(String(100))
    ogrn = Column(String(100))
    phones = Column(String(100))
    emails = Column(String(100))
    sites = Column(String(100))
    title = Column(String(100))
    description = Column(String(100))
    viber = Column(String(100))
    whatsapp = Column(String(100))
    telegram = Column(String(100))
    facebook = Column(String(100))
    instagram = Column(String(100))
    vk = Column(String(100))
    youtube = Column(String(100))
    regions = Column(String(100))
    http_status = Column(Integer)
    updated = Column(String(100))
    done = Column(Integer)

    def __init__(self, item):
        self.url = item['url']
        self.inn = item['inn']
        self.ogrn = item['ogrn']
        self.phones = item['phones']
        self.emails = item['emails']
        self.sites = item['sites']
        self.title = item['title']
        self.description = item['description']
        self.viber = item['viber']
        self.whatsapp = item['whatsapp']
        self.telegram = item['telegram']
        self.facebook = item['facebook']
        self.instagram = item['instagram']
        self.vk = item['vk']
        self.youtube = item['youtube']
        self.regions = item['regions']
        self.http_status = item['http_status']
        self.updated = item['updated']
        self.done = item['updated']


class DB_Alchemy(object):

    def __init__(self):
        config = configparser.ConfigParser()
        config.read('config/app.cfg')
        if 'db_conn' not in config:
            print('db config error')  # TODO correct handling
            exit(1)
        props = dict(config.items('db_conn'))

        # self.engine = create_engine('mysql://root:root@localhost:3306/examle', echo=True)
        self.engine = create_engine(props)
        Base.metadata.create_all(self.engine)
        Session = sessionmaker(bind=self.engine)
        self.session = Session()
        print('OK')

    def save_items(self, item):
        new_book = Entity(item)
        self.session.add(new_book)
        print('процесс записи запущен')
        self.session.commit()
        self.session.close()
